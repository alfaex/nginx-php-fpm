events {

}

http {

    include mime.types;

    upstream php_upstream {
        # using host.docker.internal (url specific for mac) to force the request to come 
        # from "the host" computer, if used php:9090 it wil not work 
        # in this case because of the `--scale` parameter
        # when using scale you loose the reference of the name php, now each machine will
        # respond to a specific name, something like:
        #
        #            project name _ container name _ id
        #     server nginx-php-fpm_php_3:9090;
        #     server nginx-php-fpm_php_2:9091;
        #     server nginx-php-fpm_php_1:9092;
        # it seems that has a logic to always give the same name to the same port, but I will not try to rely on that.
        #
        # php on the docker-compose is the internal resolve address, but with scale still
        # there is a php reference, but probably will not be mapped to the right port.
        
        #just to understand here a list of ping from inside nginx container:

        # ping php                  64 bytes from 192.168.128.3 -> port 9091
        # ping nginx-php-fpm_php_1  64 bytes from 192.168.128.3 -> PORT 9091
        # ping nginx-php-fpm_php_2  64 bytes from 192.168.128.5 -> PORT 9090
        # ping nginx-php-fpm_php_3  64 bytes from 192.168.128.4 -> PORT 9092

        # `php` and `nginx-php-fpm_php_1` point to the same IP so `php:9092` and `php:9090` will never be rechead

        # If you use without the scale option `php:PORT` will work fine

        server host.docker.internal:9090;
        server host.docker.internal:9091;
        server host.docker.internal:9092;

    }

    server {
        listen 80;
        server_name localhost;

        # to use in the param SCRIPT_FILENAME with the variable $fastcgi_script_name 
        # this path will be passed with the variable $document_root
        # $document_root will be /potato/php
        # this will be the path that the fastcgi will try to look on the php container
        # so this path will need to exist on that container, not on nginx.
        root /potato/php;

        index index.php index.html;

        # location / {
        #     try_files $uri $uri/ =404;
        # }

        # here i'm looking only for .php files, if you need to go to pretty url just
        # set it up the location to your needs 
        location ~\.php$ {
            # fastcgi  it's how nginx comunicate with php
            # this file it's given by nginx itself
            include fastcgi.conf;

            # the address of the server with the php-fmp container 
            # using upstream to get that sweet load-balancing
            # fastcgi_pass php_upstream;
            fastcgi_pass php_upstream;
            

            # it direct all requests to that file, it has to be the full path
            # example:
            # GET - http://mycoolwebsite/somefile.php will be translated to
            # $document_root = root of the nginx context, in this case "/potato/php" 
            # $fastcgi_script_name = file from the request "somefile.php"
            # so on the docker php container it will look for 
            # /potato/php/somefile.php
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          

            #return 200 $fastcgi_script_name; /somefile.php
            #return 200 $document_root; /potato/demo

            # don't know when to use this yet
            # already been passed by fastcgi.conf
            fastcgi_param DOCUMENT_ROOT "/potato/php";

            # already been passed by fastcgi.conf
            fastcgi_param REQUEST_METHOD     $request_method;
        }
        
    }
}